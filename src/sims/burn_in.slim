// Alex Pinch
// Burn-in

initialize() {

        defineConstant("L", 1000000);
        defineConstant("FITMOD", 0.05);
        defineConstant("INV_LENGTH", 500000);
        defineConstant("INV_START", asInteger(L/2 - INV_LENGTH/2));
        defineConstant("INV_END", INV_START + INV_LENGTH - 1);
        defineConstant("N", 500);


        initializeMutationRate(1e-7);
        initializeMutationType("m1", 0.5, "f", 0.0);  // neutral sites
        initializeMutationType("m2", 0.5, "f", 0.0);  // start marker
        initializeMutationType("m3", 0.5, "f", 0.0);  // end marker
        c(m2,m3).convertToSubstitution = T;
        c(m2,m3).color = "red";

        initializeGenomicElementType("g1", m1, 1.0);
        initializeGenomicElement(g1, 0, L-1);
        initializeRecombinationRate(1e-8);

}

1 early(){

//	Population grid setup/subpop creation
	metapopSide = 3;
	metapopSize = metapopSide * metapopSide;
	for (i in 1:metapopSize)
		sim.addSubpop(i, 500);
	subpops = sim.subpopulations;
	
	writeFile("./burn_in_seed.txt", paste(getSeed()));

//	Migration
	for (x in 1:metapopSide) // Arranging migration rates across the grid using x and y pointers
		for (y in 1:metapopSide)
		{
			destID = (x - 1) + (y - 1) * metapopSide + 1;
			destSubpop = subpops[destID - 1];
			if (x > 1)   // Left to right migration
				destSubpop.setMigrationRates(destID - 1, 0.01);
			if (x < metapopSide)   // Right to left migration
				destSubpop.setMigrationRates(destID + 1, 0.01);
			if (y > 1)   // Top to bottom migration
				destSubpop.setMigrationRates(destID - metapopSide, 0.01);
			if (y < metapopSide)   // Bottom to top migration
				destSubpop.setMigrationRates(destID + metapopSide, 0.01);
		}
}

100000 late()
{

/* FIX THIS SO THAT IT OUTPUTS THE TOTAL DEL MUTS IN A TEXT FILE:
	total_del_muts=sum(sim.subpopulations.individuals.countOfMutationsOfType(m4))+sum(sim.subpopulations.individuals.countOfMutationsOfType(m5))+sum(sim.subpopulations.individuals.countOfMutationsOfType(m6));
	if (sim.generation % 1000 == 0) {
		print("Burn in running, Generation " + asString(sim.generation));
		print("Individuals with inversion: " + asString(sum(sim.subpopulations.individuals.countOfMutationsOfType(m2))));
		print("Total deleterious mutations: " + asString(total_del_muts));
	*/	
	}	
	sim.outputFull("./burn_in.txt");
	sim.simulationFinished(); 
}