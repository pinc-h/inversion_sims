// Alex Pinch
// Burn-in

initialize() {

        defineConstant("L", 1000000);
        defineConstant("FITMOD", 0.05);
        defineConstant("INV_LENGTH", 500000);
        defineConstant("INV_START", asInteger(L/2 - INV_LENGTH/2));
        defineConstant("INV_END", INV_START + INV_LENGTH - 1);
        defineConstant("N", 500);


        initializeMutationRate(1e-7);
        initializeMutationType("m1", 0.5, "f", 0.0);  // neutral sites
        initializeMutationType("m2", 0.5, "f", 0.0);  // start marker
        initializeMutationType("m3", 0.5, "f", 0.0);  // end marker
        c(m2,m3).convertToSubstitution = T;
        c(m2,m3).color = "red";

        initializeGenomicElementType("g1", m1, 1.0);
        initializeGenomicElement(g1, 0, L-1);
        initializeRecombinationRate(1e-8);

}

1 first(){
	metapopSide = 3;
	metapopSize = metapopSide * metapopSide;
	for (i in 1:metapopSize)
		sim.addSubpop(i, 500);
	subpops = sim.subpopulations;

//	Migration
	for (x in 1:metapopSide) // Arranging migration rates across the grid using x and y pointers
		for (y in 1:metapopSide)
		{
			destID = (x - 1) + (y - 1) * metapopSide + 1;
			destSubpop = subpops[destID - 1];
			if (x > 1)   // Left to right migration
				destSubpop.setMigrationRates(destID - 1, 0.01);
			if (x < metapopSide)   // Right to left migration
				destSubpop.setMigrationRates(destID + 1, 0.01);
			if (y > 1)   // Top to bottom migration
				destSubpop.setMigrationRates(destID - metapopSide, 0.01);
			if (y < metapopSide)   // Bottom to top migration
				destSubpop.setMigrationRates(destID + metapopSide, 0.01);
		}
		
		// set up a log file
		log = community.createLogFile("sim_burn_in_log_"+ getSeed() + ".txt", sep="\t",
		logInterval=1000);
		log.addCycle();
		log.addPopulationSize();
		log.addCustomColumn("upper_region_fitness",
		"(sum(c(p1.cachedFitness(NULL),p2.cachedFitness(NULL),p3.cachedFitness(NULL)))/1500);");
		log.addCustomColumn("lower_region_fitness",
		"(sum(c(p7.cachedFitness(NULL),p8.cachedFitness(NULL),p9.cachedFitness(NULL)))/1500);");
		log.addCustomColumn("calcFST","calcFST(c(p1.genomes, p2.genomes, p3.genomes),c(p7.genomes, p8.genomes, p9.genomes));");
		
}

100000 late() {
	sim.outputFull("./burn_in.txt"); 
}

