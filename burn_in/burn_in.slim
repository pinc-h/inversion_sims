// Alex Pinch
// Burn-in

initialize() {

	defineConstant("length", 1000000);
	defineConstant("fitMod", 0.1);
	defineConstant("invStart", 250000);
	defineConstant("invEnd", 750000);
	defineConstant("simID",getSeed());
	
	initializeMutationRate(1e-8);
	initializeMutationType("m2", 0.5, "f", 0.0);  // Inversion mutation
	initializeMutationType("m3", 0.5, "f", 0.0); // No inversion. everyone must have this or m2
	initializeMutationType("m4", 0, "g", -0.01, 0.2); // Deleterious mutations of varying dominance coefficients
	initializeMutationType("m5", 0, "g", -0.10, 0.2);
	initializeMutationType("m6", 0, "g", -0.50, 0.2);

	
	m2.convertToSubstitution = F;
	m2.color = "purple";
	m3.color = "red";
	m4.color = "green";
	m5.color = "orange";
	m6.color = "red";
	
	initializeGenomicElementType("g1", c(m4,m5,m6), c(0.33,0.33,0.33));
	initializeGenomicElement(g1, 0, length-1);
	
	initializeRecombinationRate(1e-8);

}

1 early(){

//	Population grid setup/subpop creation
	metapopSide = 3;
	metapopSize = metapopSide * metapopSide;
	for (i in 1:metapopSize)
		sim.addSubpop(i, 500);
	subpops = sim.subpopulations;
	
	writeFile("./burn_in_seed.txt", paste(simID));

//	Migration
	for (x in 1:metapopSide) // Arranging migration rates across the grid using x and y pointers
		for (y in 1:metapopSide)
		{
			destID = (x - 1) + (y - 1) * metapopSide + 1;
			destSubpop = subpops[destID - 1];
			if (x > 1)   // Left to right migration
				destSubpop.setMigrationRates(destID - 1, 0.01);
			if (x < metapopSide)   // Right to left migration
				destSubpop.setMigrationRates(destID + 1, 0.01);
			if (y > 1)   // Top to bottom migration
				destSubpop.setMigrationRates(destID - metapopSide, 0.01);
			if (y < metapopSide)   // Bottom to top migration
				destSubpop.setMigrationRates(destID + metapopSide, 0.01);
		}
}

1:50000
{
	total_del_muts=sum(sim.subpopulations.individuals.countOfMutationsOfType(m4))+sum(sim.subpopulations.individuals.countOfMutationsOfType(m5))+sum(sim.subpopulations.individuals.countOfMutationsOfType(m6));
	if (sim.generation % 1000 == 0) {
		print("Burn in running, Generation " + asString(sim.generation));
		print("Individuals with inversion: " + asString(sum(sim.subpopulations.individuals.countOfMutationsOfType(m2))));
		print("Total deleterious mutations: " + asString(total_del_muts));
		
	}	
	
}

50000
{ 
	sim.outputFull("./burn_in.txt");
	sim.simulationFinished(); 
}