// Alex Pinch
// Burn-in

initialize() {

	defineConstant("length", 1000000);
	defineConstant("fitMod", 0.3);
	defineConstant("invStart", 250000);
	defineConstant("invEnd", 750000);
	defineConstant("simID",getSeed());
	
	initializeMutationRate(1e-8);
	initializeMutationType("m1", 0.5, "f", 0.0);  // Neutral mutation
	initializeMutationType("m2", 0.5, "f", 0.0);  // Inversion mutation
	initializeMutationType("m3", 0.5, "f", 0.0); // No inversion. everyone must have this or m2
	initializeMutationType("m4", 0, "g", -0.01, 0.2); // Deleterious mutations of varying dominance coefficients
	initializeMutationType("m5", 0, "g", -0.10, 0.2);
	initializeMutationType("m6", 0, "g", -0.50, 0.2);

	
	m2.convertToSubstitution = F;
	m2.color = "purple";
	m3.color = "red";
	m4.color = "green";
	m5.color = "orange";
	m6.color = "red";
	
	initializeGenomicElementType("g1", c(m1,m4,m5,m6), c(0.99,0.01,0.01,0.01));
	initializeGenomicElement(g1, 0, length-1);
	
	initializeRecombinationRate(1e-8);

}

1 early(){

//	Population grid setup/subpop creation
	metapopSide = 3;
	metapopSize = metapopSide * metapopSide;
	for (i in 1:metapopSize)
		sim.addSubpop(i, 500);
	subpops = sim.subpopulations;
	
	writeFile("./burn_in_seed.txt", paste(simID));

//	Migration
	for (x in 1:metapopSide) // Arranging migration rates across the grid using x and y pointers
		for (y in 1:metapopSide)
		{
			destID = (x - 1) + (y - 1) * metapopSide + 1;
			destSubpop = subpops[destID - 1];
			if (x > 1)   // Left to right migration
				destSubpop.setMigrationRates(destID - 1, 0.01);
			if (x < metapopSide)   // Right to left migration
				destSubpop.setMigrationRates(destID + 1, 0.01);
			if (y > 1)   // Top to bottom migration
				destSubpop.setMigrationRates(destID - metapopSide, 0.01);
			if (y < metapopSide)   // Bottom to top migration
				destSubpop.setMigrationRates(destID + metapopSide, 0.01);
		}
}

// Changing inversion fitness across regions
// Included so that this sim can be loaded into the main model, no inversions occur in the burn in.

// Upper region fitness, inversion beneficial
fitness(m2, p1) { 
	if (homozygous==T)
		return 1.0 + (fitMod + mut.selectionCoeff);
	if (homozygous==F)
		return 1.0 + (fitMod + mut.selectionCoeff * mut.mutationType.dominanceCoeff);		
	else
		return 1.0 - (fitMod + mut.selectionCoeff * mut.mutationType.dominanceCoeff);
}
fitness(m2, p2) { 
	if (homozygous==T)
		return 1.0 + (fitMod + mut.selectionCoeff);
	if (homozygous==F)
		return 1.0 + (fitMod + mut.selectionCoeff * mut.mutationType.dominanceCoeff);		
	else
		return 1.0 - (fitMod + mut.selectionCoeff * mut.mutationType.dominanceCoeff);
}
fitness(m2, p4) { 
	if (homozygous==T)
		return 1.0 + (fitMod + mut.selectionCoeff);
	if (homozygous==F)
		return 1.0 + (fitMod + mut.selectionCoeff * mut.mutationType.dominanceCoeff);		
	else
		return 1.0 - (fitMod + mut.selectionCoeff * mut.mutationType.dominanceCoeff);
}

// Lower region fitness, inversion deleterious
fitness(m2, p6) { 
	if (homozygous==T)
		return 1.0 - (fitMod + mut.selectionCoeff);
	if (homozygous==F)
		return 1.0 - (fitMod + mut.selectionCoeff * mut.mutationType.dominanceCoeff);		
	else
		return 1.0 + (fitMod + mut.selectionCoeff * mut.mutationType.dominanceCoeff);
}
fitness(m2, p8) { 
	if (homozygous==T)
		return 1.0 - (fitMod + mut.selectionCoeff);
	if (homozygous==F)
		return 1.0 - (fitMod + mut.selectionCoeff * mut.mutationType.dominanceCoeff);		
	else
		return 1.0 + (fitMod + mut.selectionCoeff * mut.mutationType.dominanceCoeff);
}
fitness(m2, p9) { 
	if (homozygous==T)
		return 1.0 - (fitMod + mut.selectionCoeff);
	if (homozygous==F)
		return 1.0 - (fitMod + mut.selectionCoeff * mut.mutationType.dominanceCoeff);		
	else
		return 1.0 + (fitMod + mut.selectionCoeff * mut.mutationType.dominanceCoeff);
}


recombination() {
	gm1 = genome1.containsMarkerMutation(m2, invStart);
	gm2 = genome2.containsMarkerMutation(m2, invStart);
	if (!(gm1 | gm2)) { // Homozygote not inverted
		return F; // If it is homozygous and not inverted, keep breakpoints where they are
	}
	inInv = (breakpoints > invStart) & (breakpoints <= invEnd); // If the number of breakpoints is even/outside the inversion, or inside the inversion, do not change the recombination. 
	if (sum(inInv) % 2 == 0) { 
		return F; // Recombination breakpoints have not changed
	}
	if (gm1 & gm2) { // Homozygote inverted
		left = (breakpoints == invStart);
		right = (breakpoints == invEnd + 1);
		breakpoints = sort(c(breakpoints[!(left | right)],
			c(invStart, invEnd + 1)[c(sum(left) == 0, sum(right) == 0)]));
		return T; // Recombination breakpoints have changed
	} 
	else { // Heterozygote inverted: resample to get an even number of breakpoints
		breakpoints = sim.chromosome.drawBreakpoints(individual); 
	}
	return T;
}

1:50000
{
	total_del_muts=sum(sim.subpopulations.individuals.countOfMutationsOfType(m4))+sum(sim.subpopulations.individuals.countOfMutationsOfType(m5))+sum(sim.subpopulations.individuals.countOfMutationsOfType(m6));
	if (sim.generation % 1000 == 0) {
		print("Burn in running, Generation " + asString(sim.generation));
		print("Individuals with inversion: " + asString(sum(sim.subpopulations.individuals.countOfMutationsOfType(m2))));
		print("Total deleterious mutations: " + asString(total_del_muts));
		
		writeFile("./burn_in_genotypes.csv",paste(sim.generation,"pop1",p1.individuals.countOfMutationsOfType(m2),"\n"+sim.generation,"pop2",p2.individuals.countOfMutationsOfType(m2),"\n"+sim.generation,"pop3",p3.individuals.countOfMutationsOfType(m2),"\n"+sim.generation,"pop4",p4.individuals.countOfMutationsOfType(m2),"\n"+sim.generation,"pop5",p5.individuals.countOfMutationsOfType(m2),"\n"+sim.generation,"pop6",p6.individuals.countOfMutationsOfType(m2),"\n"+sim.generation,"pop7",p7.individuals.countOfMutationsOfType(m2),"\n"+sim.generation,"pop8",p8.individuals.countOfMutationsOfType(m2),"\n"+sim.generation,"pop9",p9.individuals.countOfMutationsOfType(m2)), append=T);
		
		writeFile("./burn_in_fitness.csv",paste(sim.generation,"pop1",p1.cachedFitness(NULL),"\n"+sim.generation,"pop2",p2.cachedFitness(NULL),"\n"+sim.generation,"pop3",p3.cachedFitness(NULL),"\n"+sim.generation,"pop4",p4.cachedFitness(NULL),"\n"+sim.generation,"pop5",p5.cachedFitness(NULL),"\n"+sim.generation,"pop6",p6.cachedFitness(NULL),"\n"+sim.generation,"pop7",p7.cachedFitness(NULL),"\n"+sim.generation,"pop8",p8.cachedFitness(NULL),"\n"+sim.generation,"pop9",p9.cachedFitness(NULL)), append=T);
	}	
	
}

50000
{ 
	sim.outputFull("./burn_in.txt");
	sim.simulationFinished(); 
}